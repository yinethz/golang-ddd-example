package main

import (
	"database/sql"
	"fmt"
	"net/http"      //ver en la terminal
	"text/template" //cargar plantillas

	_ "github.com/go-sql-driver/mysql"
)

func conexionBD() (conexion *sql.DB) {
	Driver := "mysql"
	Usuario := "root"
	Contrasena := ""
	Nombre := "sistemago"

	conexion, err := sql.Open(Driver, Usuario+":"+Contrasena+"@tcp(localhost)/"+Nombre)
	if err != nil {
		panic(err.Error())
	}
	return conexion
}

//busca todos los elementos que se encuentren en la carpeta pantilla
var plantilla = template.Must(template.ParseGlob("plantilla/*"))

func main() {
	//solicitud para acceder a la función inicial
	http.HandleFunc("/", Index)
	http.HandleFunc("/create", Create)
	http.HandleFunc("/insertar", Insertar)
	http.HandleFunc("/borrar", Borrar)
	http.HandleFunc("/editar", Editar)
	http.HandleFunc("/actualizar", Actualizar)

	//Mostrar datos en la terminal
	fmt.Println("Servidor de Icaro corriendo...")
	//Inicia el servidor en el puerto 8080
	http.ListenAndServe(":8080", nil)
}

func Borrar(w http.ResponseWriter, r *http.Request) {
	idEmpleado := r.URL.Query().Get("id")
	fmt.Println(idEmpleado)

	conexionExitosa := conexionBD()

	borrarRegistro, err := conexionExitosa.Prepare("DELETE FROM empleados WHERE id=?")

	if err != nil {
		panic(err.Error())
	}
	borrarRegistro.Exec(idEmpleado)

	http.Redirect(w, r, "/", 301)
}

//Declarando la estructura de la tabla
type Empleado struct {
	Id     int
	Nombre string
	Correo string
}

//función inicial
func Index(w http.ResponseWriter, r *http.Request) {
	conexionExitosa := conexionBD()
	//utilizar sentencia sql
	registros, err := conexionExitosa.Query("SELECT * FROM empleados")
	//Validar error o margen de error
	if err != nil {
		panic(err.Error())
	}
	//Declarar valiables y arreglo de variables
	empleado := Empleado{}
	arregloEmpleado := []Empleado{}

	//Recorrer todos los datos
	for registros.Next() {
		var id int
		var nombre, correo string
		err = registros.Scan(&id, &nombre, &correo)
		if err != nil {
			panic(err.Error())
		}
		empleado.Id = id
		empleado.Nombre = nombre
		empleado.Correo = correo

		//Asignar valores y unirlos a la variable
		arregloEmpleado = append(arregloEmpleado, empleado)
	}
	//imprime los valores asignados a la variable
	//fmt.Println(arregloEmpleado)

	//Dar formateado a un texto y w que el texto se pueda mostrar en el navegador
	plantilla.ExecuteTemplate(w, "index", arregloEmpleado)
}

func Editar(w http.ResponseWriter, r *http.Request) {
	idEmpleado := r.URL.Query().Get("id")
	fmt.Println(idEmpleado)

	conexionExitosa := conexionBD()
	//utilizar sentencia sql
	registro, err := conexionExitosa.Query("SELECT * FROM empleados WHERE id =?", idEmpleado)

	empleado := Empleado{}
	for registro.Next() {
		var id int
		var nombre, correo string
		err = registro.Scan(&id, &nombre, &correo)
		if err != nil {
			panic(err.Error())
		}
		empleado.Id = id
		empleado.Nombre = nombre
		empleado.Correo = correo
	}
	fmt.Println(empleado)
	plantilla.ExecuteTemplate(w, "editar", empleado)
}

//función crear
func Create(w http.ResponseWriter, r *http.Request) {
	plantilla.ExecuteTemplate(w, "create", nil)
}

//funcion insertar - guarda información de metodo post
func Insertar(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		nombre := r.FormValue("nombre")
		correo := r.FormValue("correo")

		conexionExitosa := conexionBD()

		insertarRegistros, err := conexionExitosa.Prepare("INSERT INTO empleados(nombre,correo)VALUES(?,?)")

		if err != nil {
			panic(err.Error())
		}
		insertarRegistros.Exec(nombre, correo)

		http.Redirect(w, r, "/", 301)
	}
}

//funcion actualiza - guarda información de metodo post
func Actualizar(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		id := r.FormValue("id")
		nombre := r.FormValue("nombre")
		correo := r.FormValue("correo")

		conexionExitosa := conexionBD()

		modificarRegistros, err := conexionExitosa.Prepare("UPDATE empleados SET nombre=?, correo=? WHERE id=?")

		if err != nil {
			panic(err.Error())
		}
		modificarRegistros.Exec(nombre, correo, id)

		http.Redirect(w, r, "/", 301)
	}
}
